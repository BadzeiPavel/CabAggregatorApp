services:

  postgres_db_driver:
    container_name: postgres_driver
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      POSTGRES_DB: driver_db
    volumes:
      - postgres_db_driver:/data/postgres
      - ./postgres-scripts/driver-init.sql:/docker-entrypoint-initdb.d/driver-init.sql
    ports:
      - "5434:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_db_passenger:
    container_name: postgres_passenger
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      POSTGRES_DB: passenger_db
    volumes:
      - postgres_db_passenger:/data/postgres
      - ./postgres-scripts/passenger-init.sql:/docker-entrypoint-initdb.d/passenger-init.sql
    ports:
      - "5436:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_db_ride:
    container_name: postgres_ride
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      POSTGRES_DB: ride_db
    volumes:
      - postgres_db_ride:/data/postgres
      - ./postgres-scripts/ride-init.sql:/docker-entrypoint-initdb.d/ride-init.sql
    ports:
      - "5438:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_db_keycloak:
    container_name: postgres_keycloak
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      POSTGRES_DB: keycloak_db
    volumes:
      - postgres_db_keycloak:/data/postgres
    ports:
      - "5430:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo_db:
    image: mongo:5.0.2
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db

  keycloak:
    container_name: keycloak.openid-provider
    image: quay.io/keycloak/keycloak:25.0.1
    depends_on:
      - postgres_db_keycloak
    command:
      - start-dev
      - --import-realm
      - --verbose
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/keycloak_db
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: root
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_FEATURES: authorization,scripts
      KC_SCRIPT_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
#    healthcheck:
#      test: ["CMD", "/opt/keycloak/bin/kc.sh", "show-config"]
#      interval: 5s
#      timeout: 5s
#      retries: 20

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://localhost:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  postgres_db_driver:
  postgres_db_passenger:
  postgres_db_ride:
  postgres_db_keycloak:
  mongo_data:
